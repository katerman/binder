"use strict";var Binder=function(){if(window.jQuery===undefined){console.error('dataBinder.js requires jQuery');return false;} var $this=this;this.models={};this.elemsWithCurly=[];this.elementClasses=[];this.elementValues=[];this.debug=function(bool){return $this.debug=bool;};this.modelDataAttr=function(name){return name||'model';} this.clickDataAttr=function(name){return name||'click';} this.classDataAttr=function(name){return name||'class';} this.hideDataAttr=function(name){return name||'hide';} this.showDataAttr=function(name){return name||'show';} this.valueDataAttr=function(name){return name||'value';} this.basicExtendObj={"init":[],"finish":[],"domUpdate":[]};this.customExtendObj={};this.controllers={};this.helpers=function(){if(Object.size===undefined){Object.size=function(obj){var size=0,key;for(key in obj){if(obj.hasOwnProperty(key))size++;} return size;};}}();this.expressionEngine=function(v1,operator,v2){if(operator!==undefined){switch(operator){case'!=':return(v1.toString()!=v2.toString())?true:false;case'!==':return(v1.toString()!==v2.toString())?true:false;case'==':return(v1.toString()==v2.toString())?true:false;case'===':return(v1.toString()===v2.toString())?true:false;case'<':return(v1.toString()<v2.toString())?true:false;case'<=':return(v1.toString()<=v2.toString())?true:false;case'>':return(v1.toString()>v2.toString())?true:false;case'>=':return(v1.toString()>=v2.toString())?true:false;case'&&':return(v1.toString()&&v2.toString())?true:false;case'||':return(v1.toString()||v2.toString())?true:false;default:console.error('Operator: '+operator+'cannot be used');return false;}} return(v1.toString())?true:false;} this.prototype={parseCurlys:function(){var elemsWithCurly=[];var regex=new RegExp('(\{\{.*\}\})','gmi');if($this.debug==true){console.log('Parsing curlies');} $.each($('body *').not('script'),function(k,v){var attrArray=[];var html=$(v).clone().children().remove().end().html();if(html.match(regex)){for(var i=0,len=this.attributes.length;i<len;i++){var curAttr=this.attributes[i],type=curAttr['name'],value=curAttr['value'];if(value.match(regex)){attrArray.push({"type":type,"value":value});}} $this.elemsWithCurly.push({"elem":this,"orgHtml":$(this).html(),"orgAttrs":attrArray});}});$.each($this.elemsWithCurly,function(k,v){var _this=v.elem,innertext=$(_this).text();var split=_this.outerHTML.split(regex);for(var i=0,len=split.length;i<len;i++){var current=split[i];if(current.match(regex)){var splitcurrent=current.split(" ");for(var i2=0,len2=splitcurrent.length;i2<len2;i2++){var current2=splitcurrent[i2];var restore=current2.match(regex);current2=restore?restore.join(''):'';current2=current2.replace('{{','');current2=current2.replace('}}','');if($this.models[current2]===undefined){$this.models[current2]={};} if($this.models[current2]['elems']===undefined){$this.models[current2]['elems']=[{"elem":_this}];}else{$this.models[current2]['elems'].push({"elem":_this});} if($this.models[current2]['value']===undefined){$this.models[current2]['value']=null;}}}}});},replaceCurlysWithModel:function(){if($this.debug==true){console.log('%cReplacing curly markers with model values','color: green;');} var newVals=[];$.each($this.elemsWithCurly,function(k,v){var elem=v.elem;var html=v['orgHtml'];var attr=v['orgAttrs'];var keys=$.map($this.models,function(v,i){return i;});for(var i=0,len=keys.length;i<len;i++){var currentModel=keys[i];var regex=new RegExp('\{\{'+keys[i]+'\}\}','gmi');var value=$this.models[currentModel]['value'];if(value==undefined){if(html.match(regex)!==null){if(newVals[k]===undefined){newVals[k]={"newHtml":html.replace(regex,''),"attrs":[]};}else{newVals[k]={"newHtml":newVals[k]['newHtml'].replace(regex,''),"attrs":[]};}}else if(attr.length>0&&newVals[k]==undefined){newVals[k]={};if(newVals[k]['newHtml']==undefined){newVals[k]['newHtml']=html;} if(newVals[k]['attrs']==undefined){newVals[k]['attrs']=[];}}}else{if(html.match(regex)!==null){if(newVals[k]===undefined){newVals[k]={"newHtml":html.replace(regex,value),"attrs":[]};}else{if(newVals[k]['newHtml']==undefined){console.log(newVals[k]);return false;} newVals[k]={"newHtml":newVals[k]['newHtml'].replace(regex,value),"attrs":[]};}}else if(attr.length>0&&newVals[k]==undefined){newVals[k]={};if(newVals[k]['newHtml']==undefined){newVals[k]['newHtml']=html;} if(newVals[k]['attrs']==undefined){newVals[k]['attrs']=[];}}} if(attr.length>0){for(var i2=0,len2=attr.length;i2<len2;i2++){var curAttr=attr[i2],type=curAttr['type'],attrvalue=curAttr['value'];if(attrvalue.match(regex)){if(value==null){newVals[k]['attrs'].push({"model":currentModel,"attr":type,"text":attrvalue.replace(regex,'')});}else{newVals[k]['attrs'].push({"model":currentModel,"attr":type,"text":attrvalue.replace(regex,value)});}}}}} $(elem).html(newVals[k]['newHtml']);if(newVals[k]['attrs'].length>0){$.each(newVals[k]['attrs'],function(k,v){var attr=v.attr,text=v.text,model=v.model;$(elem).attr(attr,text);});}});$this.prototype.valueElemEvent();$this.prototype.classElemEvent();$this.prototype.hideElemEvent();$this.prototype.showElemEvent();$this.prototype.customExtend();},customExtend:function(){if(Object.size($this.customExtendObj)>0){$.each($this.customExtendObj,function(k,v){var dataAttr=k.toLowerCase();var model=v.model;var eventType=v.eventType;var callback=v.callback;$.each($('[data-'+dataAttr+']'),function(key,element){$(element).unbind(eventType).bind(eventType,function(){callback({"element":$(element),"dataAttrVal":$(element).data(dataAttr),"model":$this.models[model]});$this.prototype.customExtend();});});});}},hideElemEvent:function(){$.each($('[data-'+$this.hideDataAttr()+']'),function(k,elem){var segs=$(elem).data($this.hideDataAttr()).split(" ");if(segs!==undefined&&segs.length===3){var model=segs[0];var compare=segs[1];var value=segs[2];if($this.models[model]!==undefined&&$this.expressionEngine($this.models[model]['value'],compare,value)){$(elem).hide();}}else{console.error('data-'+$this.hideDataAttr()+' only accepts 3 segments as an expression - {model} !== 1 ');}});},showElemEvent:function(){$.each($('[data-'+$this.showDataAttr()+']'),function(k,elem){var segs=$(elem).data($this.showDataAttr()).split(" ");if(segs!==undefined&&segs.length===3){var model=segs[0];var compare=segs[1];var value=segs[2];if($this.models[model]!==undefined&&$this.expressionEngine($this.models[model]['value'],compare,value)){$(elem).show();}}else{console.error('data-'+$this.showDataAttr()+' only accepts 3 segments as an expression - {model} !== 1 ');}});},valueElemEvent:function(){$.each($('[data-'+$this.valueDataAttr()+']'),function(k,elem){if($this.elementValues[k]===undefined){$this.elementValues.push({model:$(elem).data($this.valueDataAttr())});} var val=$this.models[$this.elementValues[k]['model']];if(val!=undefined){if(elem.tagName==='SELECT'){if($(elem).children('[value="'+val['value']+'"]').length>0){$(elem).val(val['value']);}}else{$(elem).val(val['value']);}}});},classElemEvent:function(){$.each($('[data-'+$this.classDataAttr()+']'),function(k,elem){var finalClassStr='';if($this.elementClasses[k]===undefined){$this.elementClasses.push($(elem).attr('class'));} if($(elem).data($this.classDataAttr())){$(elem).attr('class','');var finalClasses={};var classes=$(elem).data($this.classDataAttr()).split(" ");$.each($this.elementClasses[k].split(" "),function(k,value){if(finalClasses[value]===undefined){finalClasses[value]=value;}});$.each(classes,function(k,value){if($this.models[value].value!==null&&finalClasses[value]===undefined){finalClasses[value]=$this.models[value].value;}});$.each(finalClasses,function(k,v){finalClassStr+=v+' ';});$(elem).attr('class',finalClassStr);}});},domEvents:function(){$('[data-'+$this.modelDataAttr()+']').unbind('keyup change').bind('keyup change',function(){var model=$(this).data($this.modelDataAttr());$this.model(model,$(this).val());$this.controllerCall($(this),model);});$('[data-'+$this.clickDataAttr()+']').unbind('click').bind('click',function(){var segs=$(this).data($this.clickDataAttr()).split(" ");if(segs.length===3){var model=segs[0];var value=segs[2];$this.model(model,value);}else{console.error('data-'+$this.clickDataAttr()+' require 3 parts to its expression - {model} = {value}');} $this.controllerCall($(this),model);});if(Object.size($this.basicExtendObj['domUpdate'])>0){$.each($this.basicExtendObj['domUpdate'],function(k,v){v.call();});}}} this.controller=function(name,callback){if($this.models[name]===undefined){$this.model(name,'');} $this.controllers[name]=callback;if($this.debug){console.log('%cDefined model callback for '+name,"color: orange");}} this.controllerCall=function(element,model){if(model!==undefined){var dataModel=model;}else{var dataModel=$(element).data($this.modelDataAttr());} if($this.controllers[dataModel]!==undefined){$this.controllers[dataModel](element,$this.models[dataModel]);if($this.debug){console.log('%c-model callback fired for: '+dataModel,"color: brown;");} return true;} return false;} this.model=function(mod,val){if(typeof mod==='object'){$.each(mod,function(k,v){var mod=k,val=v;if($this.models[mod]===undefined){$this.models[mod]={};if($this.debug==true){console.log('Adding model: '+mod+' to Value: '+val);}}else{if($this.debug==true){console.log('Updated model: '+mod+' to Value: '+val);}} $this.models[mod]['value']=val;});}else{if($this.models[mod]===undefined){$this.models[mod]={};if($this.debug==true){console.log('Adding model: '+mod+' to Value: '+val);}}else{if($this.debug==true){console.log('Updated model: '+mod+' to Value: '+val);}} $this.models[mod]['value']=val;} $this.prototype.replaceCurlysWithModel();return true;} this.extend=function(when,funct){if(typeof when==='object'){var model=when.model===undefined?'':when.model;var data=when.data===undefined?null:when.data;var callback=when.data===undefined?null:when.callback;var eventType=when.eventType===undefined?'click':when.eventType;if(data==null){return error.log('data key is requried for the extend method.');}else if(callback==null){return error.log('callback key is requried for the extend method.');} return $this.customExtendObj[data]={"model":model,"callback":callback,"eventType":eventType};}else{if($this.basicExtendObj[when]===undefined){return console.error('You cant use a firing position of '+when+' the only options are init, finish, and domUpdate');}else if(typeof funct!=='function'){return console.error('Extends second option needs to be a function');}else{return $this.basicExtendObj[when].push(funct);}}} this.init=function(){if($this.debug){console.log('%c:BINDER INIT:','color: #1b75bc; border-bottom: 1px solid #6677ff;');} if($this.debug){console.time(":Binder Setup Time:");} if(Object.size($this.basicExtendObj['init'])>0){$.each($this.basicExtendObj['init'],function(k,v){v.call($this);});} var prototype=$this.prototype;prototype.parseCurlys();prototype.replaceCurlysWithModel();prototype.domEvents();if($this.debug){console.timeEnd(":Binder Setup Time:");} if($this.debug){console.log(this);} if(Object.size($this.basicExtendObj['finish'])>0){$.each($this.basicExtendObj['finish'],function(k,v){v.call($this);});}}}